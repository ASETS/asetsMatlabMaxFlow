function [] = atlasProbabilityMapsRegularization3D()

%   Martin Rajchl, Imperial College London, 2015
%   Example application: Graph cut post processing of probabilistic labels.
%
%   Probabilistic label maps typically generated by multi-atlas
%   segmentation frameworks are regularized via multi-region graph cut as 
%   a post-processing step.
%
%   References: 
%   [1] Rajchl M., et al. (2015). Hierarchical Max-Flow Segmentation
%       Framework For Multi-Atlas Segmentation with Kohonen Self-Organizing 
%       Map Based Gaussian Mixture Modeling. Medical Image Analysis
%
%   [2] Qiu, W. et al. (2014). Cerebral Ventricle Segmentation from 3D 
%       Pre-term IVH Neonate MR Images Using Atlas-Based Convex Optimization.
%       Computer-Assisted and Robotic Endoscopy, pp.46â€“54.


close all;
clear all;

% include max-flow solver
addpath(['..', filesep, 'maxflow']);
addpath(['..', filesep, 'lib']);

% flags
visualizationFLAG = 1;

% load probability maps
load(['..', filesep, 'data', filesep, 'brain_prob_MNI.mat']);

% parameters
alpha1 = 0.05;
numberOfLabels = 4;
[r, c, s] = size(bg);

% alloc a cost function Ct for each label i, int lId
Ct = zeros(r,c,s, numberOfLabels);
alpha = alpha1.*ones(r,c,s, numberOfLabels);

% compute the likelihood from the probabilities \in [0,1] as data term
epsilon = 1e-10;

% brain mask
Ct(:,:,:,1) = -log(bg + epsilon);
% cerebro-spinal fluid
Ct(:,:,:,2) = -log(csf + epsilon);
% white matter
Ct(:,:,:,3) = -log(wm + epsilon);
% gray matter
Ct(:,:,:,4) = -log(gm + epsilon);

% pars = [rows; columns; slices; numberOfLabels; maxIter; convRate; cc; stepSize];
pars = [r; c; s; numberOfLabels; 200; 1e-11; 0.25; 0.11];

% call 3D max-flow optimizer
[u, erriter, i, timet] = asetsPotts3D(Ct, alpha, pars);

% maj vote to discretize continuous labels
[uu,I] = max(u, [], 4);

% visualize
if(visualizationFLAG)
    
    % compute mid slices in each direction
    vis_r = idivide(r,uint8(2));
    vis_c = idivide(c,uint8(2));
    vis_s = idivide(s,uint8(2));
    
    figure();
    for i=1:(numberOfLabels)
        subplot(4,numberOfLabels,i); imshow(Ct(:,:,vis_s,i),[0 1]);
        subplot(4,numberOfLabels,i+numberOfLabels); imshow(squeeze(u(vis_r,:,:,i)),[0 1]);
        subplot(4,numberOfLabels,i+2*numberOfLabels); imshow(squeeze(u(:,vis_c,:,i)),[0 1]);
        subplot(4,numberOfLabels,i+3*numberOfLabels); imshow(squeeze(u(:,:,vis_s,i)),[0 1]);
    end
    
    % view resulting labeling functions from each implementation
    figure();
    subplot(1,3,1); imshow(squeeze(I(vis_r,:,:)),[1 numberOfLabels]);
    subplot(1,3,2); imshow(squeeze(I(:,vis_c,:)),[1 numberOfLabels]);
    subplot(1,3,3); imshow(squeeze(I(:,:,vis_s)),[1 numberOfLabels]);
    
    colormap('jet');
    
end


end




